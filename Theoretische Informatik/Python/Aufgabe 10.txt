def divMod(m, n):
	if m < n:
		return (0, m)
	q1, r1 = divMod(m // 2, n)
	if 2 * r1 + (m % 2) < n:
		return (2 * q1, 2 * r1 + (m % 2))
	else:
		return (2 * q1 + 1, 2 * r1 + (m % 2) - n)

divMod(m, n) = <q, r>
	m = qn + r  ^  0 <= r < n

Bew durch Wertverlaufsinduktion

IA: m<n
<q,r> = <0,m>
	m = qn + r
<=> m = 0*n + m
<=> m = m

	0 <= r < n
<=> 0 <= m < n

IS: m//2 => m

Voraussetzung: Die oben genannten Spezifikationen für divMod(m//2, n) gelten

Was wir nach Voraussetzung wissen:
m//2 = qn + r
0 <= r < n

1. Fall: 2r + m%2 < n
	<q, r> = divMod(m//2, n)
	<2q, 2r + m%2> = divMod(m, n)
	z.z.: m = 2qn + 2r + m%2  ^  0 <= 2r + m%2 < n
	
		m = 2(m//2) + m%2
	<=>	m = 2(qn + r) + m%2
	<=> m = 2qn + 2r + m%2
	
	Es geht aus der Voraussetzung der Fallunterscheidung hervor, dass gilt:
	0 <= 2r + m%2 < n

2. Fall: 2r + m%2 >= n
	<q, r> = divMod(m//2, n)
	<2q + 1, 2r + m%2 - n> = divMod(m, n)
	z.z.: m = (2q + 1)n + 2r + m%2 - n  ^  0 <= 2r + m%2 - n < n
	
		m = 2(m//2) + m%2
	<=> m = 2(qn + r) + m%2
	<=> m = 2qn + 2r + m%2
	<=> m = 2qn + 0 + 2r + m%2
	<=> m = 2qn + n - n + 2r + m%2
	<=> m = (2q + 1)n + 2r + m%2 - n
	
		2r + m%2 - n < n
	m%2 muss entweder 0 oder 1 ergeben. Da 0<1, reicht es die obenstehende Ungleichung für m%2 = 1 zu beweisen, da sie dann für m%2 = 0 ebenfalls gelten muss. Im folgenden ersetzen wir deswegen m%2 mit 1:
		2r + m%2 - n < n  |+ n
	<=> 2r + 1 < 2n  |:2
	<=> r + 1/2 < n
	Das gilt nach der IV, weil r und n beides ganze Zahlen sind und r < n gilt.
	
		0 <= 2r + m%2 - n  |+n
	<=> n <= 2r + m%2
	Das gilt nach der Voraussetzung der Fallunterscheidung.

Terminierung:
Um die Wertverlaufsinduktion abzuschließen, muss noch bewiesen werden, dass die Funktion in endlicher Zeit terminiert.
divMod(m, n) terminiert sobald m<n gilt und da m und n beides positive Zahlen sind, wird m//2<m für alle m gelten. Dementsprechend wird m//2 irgendwann auch kleiner als n werden.
