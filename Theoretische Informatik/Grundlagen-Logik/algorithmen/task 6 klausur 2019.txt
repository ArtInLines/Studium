{X > Y; Y >= 0; X, Y of type integer}
I := Y
Z := 0
repeat
    Z := Z + 2
    I := I + 1
until I := X
{Z = 2*(X-Y); X > Y; Y >= 0; X,Y of type integer}


INV: {Y <= I <= X, Z = 2*(I-Y)}



# Y=3, X=5
# I=3, Z=0 => Z=2*(I-Y)
# I=4, Z=2 => Z=2*(I-Y)
# I=5, Z=4 => Z=2*(I-Y)
# 2*(5-3) = 4


1.
INV: {Y <= I <= X, Z = 2*(I-Y)}


{Y <= I < X, Z = 2*(I-Y)} = B
Z := 0
{Y <= I < X, 0 = 2*(I-Y)}
I := Y
{Y <= Y < X, 0 = 2*(Y-Y)}

repeat
    {Y <= I <= X, Z = 2*(I-Y)}
    I := I + 1
    {Y < (I+1) <= X, Z = 2*(I+1-Y)}
    Z := Z + 2
    {Y < (I+1) <= X, Z+2 = 2*(I+1-Y)}
    {Y < (I+1) <= X, Z = 2*(I+1-Y)-2}
    {Y <= I < X, Z = 2*I - 2*Y = 2*(I-Y)} = B    
until I = X


2. INV ^ not(I=X) => B


3. Schleife terminiert
I started < X und erhÃ¶ht sih jede Iteration um 1, d.h. irgendwann ist I=X und dann terminiert die Schleife.