1. Listen
2. Rekursion

Listen:

1. Element
Restliste


Eine Liste mit Zahlen
[1, ...]
1 + 2 = 3

[2, ...]
2 + 0 = 2

[]
0


summe(Liste) => Zahl
    Falls Liste leer: 0
    Erste Element + summe(Restliste)
    
summe([1, 2, 3])
    1 + summe([2, 3])
        2 + summe([3])
            3 + summe([])
                0

1. Funktion nochmal aufrufen
2. Base Case (Testfall ohne rekursiven Aufruf)
3. Input kleiner sein muss


betrag(Liste) => Liste
    Falls die Liste leer ist: Leere Liste ausgeben
    Falls Erstes Element negativ: * -1
    Ansonsten so lassen
    betrag(Restliste)
    (Verändertes) erstes Element wieder an den Anfang der veränderten Restliste hängen
    
betrag([1, -2, -3])
    1
    betrag([-2, -3])
        -2 * -1 = 2
        betrag([-3])
            -3 * -1 = 3
            betrag([])
                []
            [3]
        [2, 3]
    [1, 2, 3]


L1 = [1, 2]
L2 = [5, 6, 7]
[...L1, ...L2]
conc(L1, L2) => Liste
    Falls L1 leer ist: => L2
    conc(Restliste von L1, L2) => [2, 5, 6, 7]
    Erstes Element von L1 an den Anfang der neuen Restliste schieben => [1, 2, 5, 6, 7]
    
conc([1, 2], [5, 6, 7])
    conc([2], [5, 6, 7])
        conc([], [5, 6 ,7])
            [5, 6, 7]
        [2, 5, 6, 7]
    [1, 2, 5, 6, 7]

