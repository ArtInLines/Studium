{ X > 0,  Y < 0 }  Vorbedingung

X = Y * Y;     Code

{ X = Y^2, X > 0 }   Nachbedingung




{ X>Y ; Y>=0; X, Y of type integer }
I := Y;
Z:=0;
repeat
    INV
    Z := Z + 2;
    I := I + 1
    INV
until I = X
{ Z=2*(X-Y) ; X>Y ; Y>=0 ; X, Y of type integer }

INV = { Z = 2*(I-Y) ; X>Y ; Y>=0 ; X>=I>=Y }


I = X ^ INV =>  { Z = 2*(X-Y) ; X>Y ; Y>=0 ; X>=X>=Y }   <=>    { Z=2*(X-Y) ; X>Y ; Y>=0 ; X, Y of type integer }


Schleife:
{ Z = 2 * (I - Y) }

I := I + 1
{ Z = 2 * ((I + 1) - Y) }

Z := Z + 2;
{ Z + 2 = 2 * ((I + 1) - Y) }
{ Z = (2 * I) - (2 * Y) = 2 * (I-Y) }

Raus aus der Schleife:
{ Z = 2 * (I-Y) }

I := Y;
{ Z = 2 * (Y-Y) }

Z:=0;
{ 0 = 2 * (Y-Y) = 2*0 }


0. INV finden
1. Zeile für Zeile durchgehen und die INV abändern/beweisen
2. Abbruchbedingung ^ INV => Nachbedingung
3. In Worten beschreiben, warum die Schleife nichgt endlos läuft



18 - 6)

{ X>Y ; Y>=0; X, Y of type integer }
I := X;
Z:=0;
repeat
    INV
    Z := Z + 2;
    I := I - 1
    INV
until I = Y
{ Z=2*(X-Y) ; X>Y ; Y>=0 ; X, Y of type integer }


Z = 2 * ((X - 1) - X)  =  2 * (-1)  =  -2

Z = 2 * (X - I)  =  2 * (X - (X - 1))  =  2 * (X - X + 1))  =  2

a - (b - c) = a - b + c
a - b   =   a + (-1 * b)


1.
{ Z = 2 * (X - I) }

I := I - 1
{ Z = 2 * (X - (I - 1)) }

Z := Z + 2
{ Z = 2 * (X - (I - 1)) - 2  =  2 * (X - I) + 2*1 - 2  =  2 * (X - I)}


Z:=0;
{ 0 = 2 * (X - I) }

I := X;
{ 0 = 2 * (X - X) }


2.
I = Y ^ { Z = 2 * (X - I)} => { Z = 2 * (X - Y) ; X>Y ; Y>=0 ; X, Y of type integer }

3.
Weil I als X initialisiert wird und X > Y ist und I in jeder Iteration der Schleife um 1 kleiner wird und X und Y integers sind und I = Y die Abbruchbedingung ist. I wird als in endlicher Zeit = Y sein.



{ X>Y ; Y>=0; X, Y of type integer }
I := Y;
Z := 0;
repeat
    I := I + 1;
    Z := Z + 1
until I = X
{ Z=X-Y ; X>Y ; Y>=0 ; X, Y of type integer }

1 = (Y+1) - Y


I = X  ^  Z = I - Y  =>  Z = X - Y



18 - 7)

{ ? }
if X<Y then X := Y - X;
if X<0 then Y := X - Y
    else Y := X + Y
{Y>X; X, Y of type integer }

- kein if
- untere if
- obere if
- beide ifs

{ (kein if) v (untere if) v (obere if) v (beide ifs) }


{ Y > X }

if X < 0 then Y := X - Y
    else Y := X + Y
{ (X-Y>X ^ X<0) v (X+Y>X ^ X>=0) }

if X<Y then X := Y - X;
{ (X<Y ^ (Y-X)-Y>Y-X ^ (Y-X)<0) v (X>=Y ^ X-Y>X ^ X<0) v (X<Y ^ (Y-X)+Y>Y-X ^ Y-X>=0) v (X>=Y ^ X+Y>X ^ X>=0) }

{ (X<Y ^ 0>Y ^ Y<X) v (X>=Y ^ Y<0 ^ X<0) v (X<Y ^ Y>0 ^ Y>=X) v (X>=Y ^ Y>0 ^ X>=0) }

{ (0>X>=Y) v (Y>X ^ Y>0) v (X>=Y ^ Y>0) }




19 - 7)

Y := Y - X;
if X<0 then
    if Y<0 then Y := X * Y
        else Y := Y - X
{ Y>0; X, Y of type integer }

{Y > 0}

{ (beide ifs) v (kein if) v (if & else) }

{ (X<0 ^ Y<0 ^ X*Y>0) v (Y>0 ^ X>=0) v (X<0 ^ Y>=0 ^ Y-X>0) }

Y := Y - X;
{ (X<0 ^ (Y-X)<0 ^ X*(Y-X)>0) v ((Y-X)>0 ^ X>=0) v (X<0 ^ (Y-X)>=0 ^ (Y-X)-X>0) }

{ (X<0 ^ Y<X ^ Y>X) v (Y>X ^ X>=0) v (X<0 ^ Y>=X ^ Y>2X) }

{ (Y>X ^ X>=0) v (X<0 ^ Y>2X) }


